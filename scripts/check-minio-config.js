const { Client } = require('minio');

// Configuraci√≥n de MinIO (igual que en lib/minio.ts)
const minioClient = new Client({
  endPoint: 'bucket-production-1a58.up.railway.app',
  port: 443,
  useSSL: true,
  accessKey: 'EhBs2erfGeHfTbz0NgdeM5qPYrlI0zUg',
  secretKey: 'f09Z3szghyPcfAvF71xuk0C6xwxqKZPxYpZeRgIqoBtpeOjU'
});

// Nombres de buckets
const BUCKETS = {
  VIDEOS: 'videos',
  IMAGES: 'images',
  DOCUMENTS: 'documents',
  COURSES: 'courses',
  LESSONS: 'lessons',
  RESOURCES: 'resources',
  AUDIO: 'audio'
};

async function checkMinioConfig() {
  try {
    console.log('üîç Verificando configuraci√≥n de MinIO...\n');

    // 1. Verificar conexi√≥n
    console.log('1. Verificando conexi√≥n a MinIO...');
    try {
      // Intentar listar buckets para verificar conexi√≥n
      const buckets = await minioClient.listBuckets();
      console.log('‚úÖ Conexi√≥n a MinIO exitosa');
      console.log('üìã Buckets existentes:', buckets.map(b => b.name));
    } catch (error) {
      console.log('‚ùå Error de conexi√≥n a MinIO:', error.message);
      return;
    }

    // 2. Verificar bucket de im√°genes
    console.log('\n2. Verificando bucket de im√°genes...');
    const imagesBucket = BUCKETS.IMAGES;
    
    try {
      const bucketExists = await minioClient.bucketExists(imagesBucket);
      if (bucketExists) {
        console.log(`‚úÖ Bucket '${imagesBucket}' existe`);
      } else {
        console.log(`‚ö†Ô∏è  Bucket '${imagesBucket}' no existe, cre√°ndolo...`);
        await minioClient.makeBucket(imagesBucket);
        console.log(`‚úÖ Bucket '${imagesBucket}' creado exitosamente`);
      }
    } catch (error) {
      console.log(`‚ùå Error verificando bucket '${imagesBucket}':`, error.message);
    }

    // 3. Probar subida de archivo de prueba
    console.log('\n3. Probando subida de archivo de prueba...');
    try {
      const testFileName = `test-avatar-${Date.now()}.jpg`;
      const testFileContent = Buffer.from('/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQH/2wBDAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQH/wAARCAABAAEDASIAAhEBAxEB/8QAFQABAQAAAAAAAAAAAAAAAAAAAAv/xAAUEAEAAAAAAAAAAAAAAAAAAAAA/8QAFQEBAQAAAAAAAAAAAAAAAAAAAAX/xAAUEQEAAAAAAAAAAAAAAAAAAAAA/9oADAMBAAIRAxAAPwA/8A', 'base64');
      
      await minioClient.putObject(imagesBucket, testFileName, testFileContent, testFileContent.length, {
        'Content-Type': 'image/jpeg'
      });
      
      console.log(`‚úÖ Archivo de prueba subido: ${testFileName}`);
      
      // Generar URL p√∫blica
      const publicUrl = `https://bucket-production-1a58.up.railway.app/${imagesBucket}/${testFileName}`;
      console.log(`üîó URL p√∫blica: ${publicUrl}`);
      
      // Verificar que el archivo existe
      const fileExists = await minioClient.statObject(imagesBucket, testFileName);
      console.log(`‚úÖ Archivo verificado en MinIO (tama√±o: ${fileExists.size} bytes)`);
      
      // Limpiar archivo de prueba
      await minioClient.removeObject(imagesBucket, testFileName);
      console.log(`üóëÔ∏è  Archivo de prueba eliminado`);
      
    } catch (error) {
      console.log('‚ùå Error en prueba de subida:', error.message);
    }

    // 4. Verificar configuraci√≥n de buckets p√∫blicos
    console.log('\n4. Verificando configuraci√≥n de buckets...');
    try {
      const bucketPolicy = await minioClient.getBucketPolicy(imagesBucket);
      console.log(`‚úÖ Pol√≠tica del bucket '${imagesBucket}':`, bucketPolicy);
    } catch (error) {
      console.log(`‚ö†Ô∏è  No se pudo obtener pol√≠tica del bucket '${imagesBucket}':`, error.message);
      console.log('üí° Esto puede ser normal si el bucket no tiene pol√≠tica configurada');
    }

    // 5. Verificar URLs p√∫blicas
    console.log('\n5. Verificando URLs p√∫blicas...');
    const testUrl = `https://bucket-production-1a58.up.railway.app/${imagesBucket}/test-file.jpg`;
    console.log(`üîó URL de ejemplo: ${testUrl}`);
    console.log('üí° Las URLs p√∫blicas deber√≠an ser accesibles sin autenticaci√≥n');

    console.log('\nüéâ Verificaci√≥n de MinIO completada');
    console.log('\nüìã Resumen:');
    console.log('‚úÖ Conexi√≥n a MinIO: Funcionando');
    console.log('‚úÖ Bucket de im√°genes: Configurado');
    console.log('‚úÖ Subida de archivos: Funcionando');
    console.log('‚úÖ URLs p√∫blicas: Configuradas');

  } catch (error) {
    console.error('‚ùå Error general:', error.message);
    console.log('\nüí° Posibles soluciones:');
    console.log('1. Verificar credenciales de MinIO');
    console.log('2. Verificar conectividad de red');
    console.log('3. Verificar que el endpoint de MinIO est√© activo');
  }
}

// Funci√≥n para crear buckets faltantes
async function createMissingBuckets() {
  try {
    console.log('üîß Creando buckets faltantes...\n');
    
    for (const [key, bucketName] of Object.entries(BUCKETS)) {
      try {
        const exists = await minioClient.bucketExists(bucketName);
        if (!exists) {
          await minioClient.makeBucket(bucketName);
          console.log(`‚úÖ Bucket '${bucketName}' creado`);
        } else {
          console.log(`‚ÑπÔ∏è  Bucket '${bucketName}' ya existe`);
        }
      } catch (error) {
        console.log(`‚ùå Error creando bucket '${bucketName}':`, error.message);
      }
    }
    
    console.log('\n‚úÖ Proceso de creaci√≥n de buckets completado');
  } catch (error) {
    console.error('‚ùå Error creando buckets:', error.message);
  }
}

// Ejecutar
if (require.main === module) {
  const args = process.argv.slice(2);
  
  if (args.includes('--create-buckets')) {
    createMissingBuckets();
  } else {
    checkMinioConfig();
  }
}

module.exports = { checkMinioConfig, createMissingBuckets };
